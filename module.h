/* Generated by CMunge 0.76 (10 May 2006) [with GCCSDK 4 changes r7132 at
 * /trunk/gcc4/riscos/cmunge]
 * CMunge Copyright (c) 1999-2006 Robin Watts/Justin Fletcher
 * Copyright (c) 2007-2014 GCCSDK Developers and contributors */

#ifndef _CMUNGE_Engine3D_H_
#define _CMUNGE_Engine3D_H_

#include "kernel.h"

#define CMUNGE_VERSION (76)
#define CMHG_VERSION   (531) /* Nearest equivalent version */

#define Module_Title		"Engine3D"
#define Module_Help		"Engine3D"
#define Module_VersionString	"1.00"
#define Module_VersionNumber	100
#ifndef Module_Date
#define Module_Date		"09 Sep 2019"
#endif

#ifdef __cplusplus
extern "C" {
#endif


/***************************************************************************
 * Function:     main
 * Description:  Module entry point when entered by OS_Module 2. We are in
 *               user mode and will be using user mode stack in application
 *               space. If you're going to be a module task, then you will
 *               need to claim Service_Memory.
 * Parameters:   argc   = Count of the number of arguments passed to the
 *                        module in R2 when OS_Module 2 issued.
 *               argv[] = array of pointers to strings passed as arguments
 *                        to the module
 * On exit:      Return EXIT_SUCCESS for successful completion, or
 *               EXIT_FAILURE (or some other non-zero value for failure.
 **************************************************************************/
int main(int argc, char *argv[]);


/***************************************************************************
 * Function:     module_init
 * Description:  Initialise the module, setting up vectors, callbacks and
 *               any other parts of the system necessary for the module to
 *               function.
 * Parameters:   tail        = pointer to command line (control terminated)
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return NULL for successful initialisation, or a pointer to
 *               an error block if the module could not start properly.
 **************************************************************************/
_kernel_oserror *module_init(const char *tail, int podule_base, void *pw);


/***************************************************************************
 * Function:     module_final
 * Description:  Finalise the module, shutting down any systems necessary,
 *               freeing vectors and releasing workspace
 * Parameters:   fatal       = fatality indicator; 1 if fatal, 0 if
 *                             reinitialising
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return NULL for successful finalisation, or a pointer to an
 *               error block if module was not shutdown properly.
 **************************************************************************/
_kernel_oserror *module_final(int fatal, int podule_base, void *pw);


/***************************************************************************
 * Description:  SWI handler routine. All SWIs for this module will be
 *               passed to these routines.
 * Parameters:   number = SWI number within SWI chunk (i.e. 0 to 63)
 *               r      = pointer to register block on entry
 *               pw     = private word for module
 * On exit:      Return NULL if SWI handled sucessfully, setting return
 *               register values (r0-r9) in r.
 *               Return error_BAD_SWI for out of range SWIs.
 *               Return an error block for a custom error.
 **************************************************************************/
/* Function called to handle SWI calls */
_kernel_oserror *module_service(int number, _kernel_swi_regs *r, void *pw);
/* SWI number definitions */
#define Engine3D_00 (0x00081400)
#undef Engine3D_Init
#undef XEngine3D_Init
#define Engine3D_Init             (0x00081400)
#define XEngine3D_Init            (0x000a1400)
#undef Engine3D_Shutdown
#undef XEngine3D_Shutdown
#define Engine3D_Shutdown         (0x00081401)
#define XEngine3D_Shutdown        (0x000a1401)
#undef Engine3D_SetClip
#undef XEngine3D_SetClip
#define Engine3D_SetClip          (0x00081402)
#define XEngine3D_SetClip         (0x000a1402)
#undef Engine3D_ClearScreen
#undef XEngine3D_ClearScreen
#define Engine3D_ClearScreen      (0x00081403)
#define XEngine3D_ClearScreen     (0x000a1403)
#undef Engine3D_FlipBanks
#undef XEngine3D_FlipBanks
#define Engine3D_FlipBanks        (0x00081404)
#define XEngine3D_FlipBanks       (0x000a1404)
#undef Engine3D_DrawPoint
#undef XEngine3D_DrawPoint
#define Engine3D_DrawPoint        (0x00081405)
#define XEngine3D_DrawPoint       (0x000a1405)
#undef Engine3D_DrawLine
#undef XEngine3D_DrawLine
#define Engine3D_DrawLine         (0x00081406)
#define XEngine3D_DrawLine        (0x000a1406)
#undef Engine3D_DrawTriangle
#undef XEngine3D_DrawTriangle
#define Engine3D_DrawTriangle     (0x00081407)
#define XEngine3D_DrawTriangle    (0x000a1407)
#undef Engine3D_DrawGouraudTriangle
#undef XEngine3D_DrawGouraudTriangle
#define Engine3D_DrawGouraudTriangle  (0x00081408)
#define XEngine3D_DrawGouraudTriangle (0x000a1408)
#undef Engine3D_PerformanceTest2D
#undef XEngine3D_PerformanceTest2D
#define Engine3D_PerformanceTest2D  (0x00081409)
#define XEngine3D_PerformanceTest2D (0x000a1409)
#undef Engine3D_SetRenderType
#undef XEngine3D_SetRenderType
#define Engine3D_SetRenderType    (0x0008140a)
#define XEngine3D_SetRenderType   (0x000a140a)
#undef Engine3D_ObjectSize
#undef XEngine3D_ObjectSize
#define Engine3D_ObjectSize       (0x0008140b)
#define XEngine3D_ObjectSize      (0x000a140b)
#undef Engine3D_ShapeSize
#undef XEngine3D_ShapeSize
#define Engine3D_ShapeSize        (0x0008140c)
#define XEngine3D_ShapeSize       (0x000a140c)
#undef Engine3D_VertexSize
#undef XEngine3D_VertexSize
#define Engine3D_VertexSize       (0x0008140d)
#define XEngine3D_VertexSize      (0x000a140d)
#undef Engine3D_FaceSize
#undef XEngine3D_FaceSize
#define Engine3D_FaceSize         (0x0008140e)
#define XEngine3D_FaceSize        (0x000a140e)
#undef Engine3D_InitialiseObject
#undef XEngine3D_InitialiseObject
#define Engine3D_InitialiseObject  (0x0008140f)
#define XEngine3D_InitialiseObject (0x000a140f)
#undef Engine3D_RenderObject
#undef XEngine3D_RenderObject
#define Engine3D_RenderObject     (0x00081410)
#define XEngine3D_RenderObject    (0x000a1410)
#undef Engine3D_TransformObject
#undef XEngine3D_TransformObject
#define Engine3D_TransformObject  (0x00081411)
#define XEngine3D_TransformObject (0x000a1411)
#undef Engine3D_SetAmbientLight
#undef XEngine3D_SetAmbientLight
#define Engine3D_SetAmbientLight  (0x00081412)
#define XEngine3D_SetAmbientLight (0x000a1412)
#undef Engine3D_SetDirectionalLight
#undef XEngine3D_SetDirectionalLight
#define Engine3D_SetDirectionalLight  (0x00081413)
#define XEngine3D_SetDirectionalLight (0x000a1413)
#undef Engine3D_SetNormalsVisibility
#undef XEngine3D_SetNormalsVisibility
#define Engine3D_SetNormalsVisibility  (0x00081414)
#define XEngine3D_SetNormalsVisibility (0x000a1414)
#undef Engine3D_RenderFrame
#undef XEngine3D_RenderFrame
#define Engine3D_RenderFrame      (0x00081415)
#define XEngine3D_RenderFrame     (0x000a1415)

/* Special error for 'SWI values out of range for this module' */
#define error_BAD_SWI ((_kernel_oserror *) -1)

#ifdef __cplusplus
}
#endif

#endif
